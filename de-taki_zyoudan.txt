


//BIG,REGカウンタ データ機上段 シリアル通信
//A0　百千桁、A１　十一桁、A２　リセット

//1000 d13,100 d10,10 d9,1 d7
//b d8,a d12,f d11,g d6,c d5,d d3,e d2

#include <EEPROM.h>
int val0 = EEPROM.read(0);
int val1 = EEPROM.read(1);
int val2 = EEPROM.read(2);
int bal0 = EEPROM.read(4);

 
void EEPROM_SAVER(int address, long val, byte val_type) {
  for (byte i = 0 ; i < val_type ; i++)
  {
    EEPROM[address + i] = (val >> (i * 8)) & B11111111;
  }
}
long EEPROM_LOADER(int address, byte val_type) {
  long ret_val = 0;
  for (byte i = 0 ; i < val_type ; i++)
  {
    ret_val += EEPROM[address + i] << (i * 8);
  }
  return ret_val;
}

int result=0;


int stateA;             // pin states
int stateC;             // pin states
int data = val0;           // rotate data

int stateD;             // pin states
int stateF;             // pin states
int adata = val1;           // rotate data

int stateG;             // pin states
int stateI;             // pin states
int cdata = val2;           // rotate data


int stateJ;             // pin states
int stateM;             // pin states
int xdata = EEPROM_LOADER(bal0, 2);          


int stateN;             // pin states
int stateL;             // pin states
int zdata = 0;           // rotate data

#include <MsTimer2.h>

const int anode_pins[] = {12, 8, 5, 3, 2, 11, 6, 4};  
const int cathode_pins[] = {7, 9, 10, 13};  
const int number_of_anode_pins = sizeof(anode_pins) / sizeof(anode_pins[0]); 
const int number_of_cathode_pins = sizeof(cathode_pins) / sizeof(cathode_pins[0]);
int numbers_to_display = 0; 
const int digits[] = {
  0b00111111, // 0
  0b00000110, // 1
  0b01011011, // 2
  0b01001111, // 3
  0b01100110, // 4
  0b01101101, // 5
  0b01111101, // 6
  0b00100111, // 7
  0b01111111, // 8
  0b01101111, // 9
};

void display_number (int n) {
  for (int i = 0; i < number_of_anode_pins; i++) {
    digitalWrite(anode_pins[i], digits[n] & (1 << i) ? HIGH : LOW);
  }
}

void clear_segments() {
  for (int j = 0; j < number_of_anode_pins; j++) {
    digitalWrite(anode_pins[j], LOW);
  }
}

void display_numbers () {
  int n = numbers_to_display; 
  for (int i = 0; i < number_of_cathode_pins; i++) {
    digitalWrite(cathode_pins[i], LOW);
    display_number(n % 10);
    delayMicroseconds(100);
    clear_segments();
    digitalWrite(cathode_pins[i], HIGH);
    n = n / 10; 
  }
}

void set_numbers(int n) {
  noInterrupts();
  numbers_to_display = n;
  interrupts();
}

// setup()　は，最初に一度だけ実行される
void setup() {
  for (int i = 0; i < number_of_anode_pins; i++) {
    pinMode(anode_pins[i], OUTPUT);  
  }
  for (int i = 0; i < number_of_cathode_pins; i++) {
    pinMode(cathode_pins[i], OUTPUT);  
    digitalWrite(cathode_pins[i], HIGH);
  }

 pinMode(14,INPUT_PULLUP);//A0
pinMode(15,INPUT_PULLUP);//A1
pinMode(16,INPUT_PULLUP);//A2
pinMode(17,INPUT_PULLUP);//A3 87カウンタ
pinMode(18,INPUT_PULLUP);//A4 87表示
pinMode(19,INPUT_PULLUP);//A5 G counter

Serial.begin(9600);
  MsTimer2::set(1, display_numbers); 
  MsTimer2::start(); 
}



void loop(){


switch(digitalRead(16)){
case 0:

break;

case 1:
data=0;
adata=0;
xdata=0;
cdata=0;
  break;

}



  
stateA = digitalRead(14);                // read

if ( stateA == 1 && stateC == 0 ) // plus count
data++;

stateC = stateA;
delay(10);
EEPROM.update(0, data);

int bdata=data*100;

 stateD = digitalRead(15);                // read

   if ( stateD == 1 && stateF == 0 ) // plus count
     adata++;

     stateF = stateD;
delay(10);
EEPROM.update(1, adata);
int edata=bdata+adata+10000;

 stateG = digitalRead(17);                // read

   if ( stateG == 1 && stateI == 0 ) // plus count
     cdata++;

     stateI = stateG;
delay(10);
 EEPROM.update(2, cdata);



int ddata=(data+adata-cdata)*100;//87
int fdata=ddata+data+adata;

 stateJ = digitalRead(19);                // read

   if ( stateJ== 1 && stateM == 0 ) // plus count
     xdata++;

     stateM = stateJ;
delay(10);
EEPROM_SAVER(bal0,xdata, 2);




int big = (edata-10000)/100;
int reg = edata-10000-(big*100);

result = (big*210)+(reg*90)-(xdata*1,4);

//xdata　コイン係数 1,4 36   1,6 31   2,0 25
//ボーナス枚数　big 210  reg  90

int sendo = result/100;
Serial.write(sendo);




  
stateN = digitalRead(18);                // read

if ( stateN == 1 && stateL == 0 ) // plus count
zdata++;

stateL = stateN;
delay(10);



switch(zdata){  
case 0:

set_numbers(edata);
delay(200);
break;

case 1:

set_numbers(fdata);
delay(200);
break;

case 2:

set_numbers(result);
delay(200);
break;
}

if( zdata >= 3){
zdata -=3;  
}



}
